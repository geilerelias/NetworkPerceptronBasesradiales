/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network;

import Jama.Matrix;
import clases.BaseRadial;
import clases.PerceptronSimple;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author gers
 */
public class FrmBaseRadial extends javax.swing.JFrame implements Runnable {

    private BaseRadial baseRadial;
    String sDirectorio = System.getProperty("user.dir") + "\\src\\network\\saved\\bases radiales\\";

    private double[][] xSimulacion;
    private ArrayList listaEg;

    /**
     * Creates new form Main
     */
    public FrmBaseRadial() {
        initComponents();
        baseRadial = new BaseRadial();
        listaEg = new ArrayList();
        crearArbol();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel6 = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        btnIniciarEntrenamiento = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnCargar = new javax.swing.JButton();
        labelEntradas = new javax.swing.JLabel();
        labelSalidas = new javax.swing.JLabel();
        labelPatrones = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtNumeroCentrosRadiales = new javax.swing.JTextField();
        txtErrorMaximoPermitido = new javax.swing.JTextField();
        btnInicializarCentrosRadiales = new javax.swing.JButton();
        panelGraficaEntrenamiento = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        labelEG = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        scrol = new javax.swing.JScrollPane();
        arbol = new javax.swing.JTree();
        panelGraficaYdvsYr = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();

        setTitle("centros radiales");
        setResizable(false);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setMaximumSize(new java.awt.Dimension(785, 727));
        jPanel6.setMinimumSize(new java.awt.Dimension(785, 727));
        jPanel6.setPreferredSize(new java.awt.Dimension(785, 727));

        tabbedPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabbedPaneMouseClicked(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        btnIniciarEntrenamiento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-inteligencia-artificial-25.png"))); // NOI18N
        btnIniciarEntrenamiento.setText("Iniciar entrenamiento");
        btnIniciarEntrenamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarEntrenamientoActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCargar.setForeground(new java.awt.Color(0, 0, 51));
        btnCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-subir-documento-25.png"))); // NOI18N
        btnCargar.setText("Cargar Patrones");
        btnCargar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        labelEntradas.setForeground(new java.awt.Color(0, 0, 51));
        labelEntradas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-m√∫ltiples-entradas-25.png"))); // NOI18N
        labelEntradas.setText("Entradas: 0");

        labelSalidas.setForeground(new java.awt.Color(0, 0, 51));
        labelSalidas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-salida-25.png"))); // NOI18N
        labelSalidas.setText("Salidas: 0");

        labelPatrones.setForeground(new java.awt.Color(0, 0, 51));
        labelPatrones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-spotted-patterns-25.png"))); // NOI18N
        labelPatrones.setText("Patrones: 0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelSalidas, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelPatrones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCargar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEntradas)
                    .addComponent(labelSalidas)
                    .addComponent(labelPatrones))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-progressbar95-25.png"))); // NOI18N
        jLabel29.setText("Numero de centros radiales");

        jLabel30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-goal-25.png"))); // NOI18N
        jLabel30.setText("Error de aproximacion optimo");

        txtNumeroCentrosRadiales.setText("0");
        txtNumeroCentrosRadiales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumeroCentrosRadialesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumeroCentrosRadialesKeyTyped(evt);
            }
        });

        txtErrorMaximoPermitido.setText("0");
        txtErrorMaximoPermitido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtErrorMaximoPermitidoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtErrorMaximoPermitidoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNumeroCentrosRadiales, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                    .addComponent(txtErrorMaximoPermitido))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumeroCentrosRadiales, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtErrorMaximoPermitido))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnInicializarCentrosRadiales.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-inform√°tica-25.png"))); // NOI18N
        btnInicializarCentrosRadiales.setText("Inicializar centros radiales");
        btnInicializarCentrosRadiales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicializarCentrosRadialesActionPerformed(evt);
            }
        });

        panelGraficaEntrenamiento.setBackground(new java.awt.Color(255, 255, 255));
        panelGraficaEntrenamiento.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelGraficaEntrenamiento.setAutoscrolls(true);
        panelGraficaEntrenamiento.setMaximumSize(new java.awt.Dimension(491, 124));
        panelGraficaEntrenamiento.setMinimumSize(new java.awt.Dimension(491, 124));
        panelGraficaEntrenamiento.setName(""); // NOI18N

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(102, 102, 102));
        jLabel39.setText("Grafica error EG vs Iteraciones");

        javax.swing.GroupLayout panelGraficaEntrenamientoLayout = new javax.swing.GroupLayout(panelGraficaEntrenamiento);
        panelGraficaEntrenamiento.setLayout(panelGraficaEntrenamientoLayout);
        panelGraficaEntrenamientoLayout.setHorizontalGroup(
            panelGraficaEntrenamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraficaEntrenamientoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel39)
                .addGap(265, 265, 265))
        );
        panelGraficaEntrenamientoLayout.setVerticalGroup(
            panelGraficaEntrenamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficaEntrenamientoLayout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jLabel39)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-abrir-archivo-bajo-cursor-25.png"))); // NOI18N
        jButton3.setText("Guardar configuraci√≥n");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-signing-a-document-25.png"))); // NOI18N
        jLabel32.setText("Nombre de la red");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-directorio-activo-25.png"))); // NOI18N
        jLabel1.setText("funcion de activacion ");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Funcion base radial");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jRadioButton1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        labelEG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-punto-de-dolor-24.png"))); // NOI18N
        labelEG.setText("Error EG: ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panelGraficaEntrenamiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelEG))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(btnInicializarCentrosRadiales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnIniciarEntrenamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInicializarCentrosRadiales)
                    .addComponent(btnIniciarEntrenamiento)
                    .addComponent(labelEG))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelGraficaEntrenamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(jButton3))
                .addGap(10, 10, 10))
        );

        jScrollPane1.setViewportView(jPanel4);

        tabbedPane.addTab("Entrenamiento", jScrollPane1);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        scrol.setBorder(null);

        arbol.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        arbol.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        arbol.setAutoscrolls(true);
        arbol.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arbolValueChanged(evt);
            }
        });
        scrol.setViewportView(arbol);

        panelGraficaYdvsYr.setBackground(new java.awt.Color(255, 255, 255));
        panelGraficaYdvsYr.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel40.setText("Grafica Simulacion");

        javax.swing.GroupLayout panelGraficaYdvsYrLayout = new javax.swing.GroupLayout(panelGraficaYdvsYr);
        panelGraficaYdvsYr.setLayout(panelGraficaYdvsYrLayout);
        panelGraficaYdvsYrLayout.setHorizontalGroup(
            panelGraficaYdvsYrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelGraficaYdvsYrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGraficaYdvsYrLayout.createSequentialGroup()
                    .addGap(0, 229, Short.MAX_VALUE)
                    .addComponent(jLabel40)
                    .addGap(0, 228, Short.MAX_VALUE)))
        );
        panelGraficaYdvsYrLayout.setVerticalGroup(
            panelGraficaYdvsYrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
            .addGroup(panelGraficaYdvsYrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGraficaYdvsYrLayout.createSequentialGroup()
                    .addGap(0, 111, Short.MAX_VALUE)
                    .addComponent(jLabel40)
                    .addGap(0, 111, Short.MAX_VALUE)))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-red-25.png"))); // NOI18N
        jButton1.setText("Simular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tableInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jScrollPane2.setViewportView(table);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-actualizar-24.png"))); // NOI18N
        jButton2.setText("Actualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrol, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                    .addComponent(panelGraficaYdvsYr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrol)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                        .addGap(28, 28, 28)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelGraficaYdvsYr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabbedPane.addTab("Simulaci√≥n", jPanel3);

        jPanel5.setBackground(java.awt.SystemColor.controlHighlight);

        jLabel15.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-centro-de-diretion-2-50.png"))); // NOI18N
        jLabel15.setText("Bases Radiales");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel15)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        tabbedPane.getAccessibleContext().setAccessibleName("Entrenamiento");
        tabbedPane.getAccessibleContext().setAccessibleDescription("Entrenamiento");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir") + "\\src\\network\\data");

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            CargarArchivo(file);

            labelEntradas.setText("Entradas: " + baseRadial.getM());
            labelPatrones.setText("Patrones: " + baseRadial.getPatrones());
            labelSalidas.setText("Salidas: " + baseRadial.getN());
            btnInicializarCentrosRadiales.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(null, "\nOpeeracion cancelada por el usuario", "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void txtNumeroCentrosRadialesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroCentrosRadialesKeyTyped
        soloNumeros(evt, txtNumeroCentrosRadiales);
    }//GEN-LAST:event_txtNumeroCentrosRadialesKeyTyped


    private void txtErrorMaximoPermitidoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtErrorMaximoPermitidoKeyReleased
        // TODO add your handling code here:
        if (!txtErrorMaximoPermitido.getText().isEmpty()) {
            double num = Double.parseDouble(txtErrorMaximoPermitido.getText());
            if (num > 1.0) {
                txtErrorMaximoPermitido.setText("0.0");
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_txtErrorMaximoPermitidoKeyReleased

    private void txtNumeroCentrosRadialesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroCentrosRadialesKeyReleased
        // TODO add your handling code here:
        if (!txtNumeroCentrosRadiales.getText().isEmpty() && !"".equals(txtNumeroCentrosRadiales.getText())) {
            double num = Double.parseDouble(txtNumeroCentrosRadiales.getText());
            if (num > 1000) {
                txtNumeroCentrosRadiales.setText("1000");
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_txtNumeroCentrosRadialesKeyReleased

    private void txtErrorMaximoPermitidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtErrorMaximoPermitidoKeyTyped
        // TODO add your handling code here:
        soloNumerosMenoresAUno(evt, txtErrorMaximoPermitido);
    }//GEN-LAST:event_txtErrorMaximoPermitidoKeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (baseRadial.getM() <= 0) {
            JOptionPane.showMessageDialog(this, "Nada que guardar. \n Asegurese de que los datos de entradas han sido cargado", "Guardando configuracion de la red", JOptionPane.ERROR_MESSAGE);
        } else if (baseRadial.getW() == null) {
            JOptionPane.showMessageDialog(this, "Nada para guardar. \n Asegurese de que los Pesos y umbrales se han inicilizado de manera correcta", "Guardando configuracion de la red", JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("Guardando configuracion de la red");
            if (txtNombre.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El nombre del archivo no puede estar en blanco.", "Guardando configuracion de la red", JOptionPane.ERROR_MESSAGE);
                txtNombre.requestFocus();
            } else {
                if (guardar(baseRadial, txtNombre.getText())) {
                    JOptionPane.showMessageDialog(this, "Configuracion guardada de manera exitosa", "Guardando configuracion de la red", JOptionPane.INFORMATION_MESSAGE);

                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void arbolValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_arbolValueChanged
        // TODO add your handling code here:
        TreePath path = evt.getPath();
        Object[] nodos = path.getPath();
        System.out.print("Path seleccionado: ");
        String cadena = sDirectorio;
        int i = 0;
        for (Object nodo : nodos) {
            if (i++ == 0) {
                cadena = cadena;
            } else {
                System.out.print(nodo.toString() + " | ");
                cadena = cadena + nodo.toString() + "\\";
            }

        }
        cadena = cadena.trim();
        cadena = cadena.substring(0, cadena.length() - 1);

        if (cadena.contains(".")) {

            File file = new File(cadena);
            try {
                if (file == null) {
                    JOptionPane.showMessageDialog(null, "No se ha encontrado el archivo o \n esta inaccesible en estos momentos", "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
                } else {
                    FileReader archivos = new FileReader(file);
                    BufferedReader lee = new BufferedReader(archivos);
                    String linea;

                    Gson gson = new Gson();

                    while ((linea = lee.readLine()) != null) {
                        baseRadial = gson.fromJson(linea, BaseRadial.class);
                        mostrarDatosParaSimular();
                    }

                    lee.close();
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex + "" + "\nNo se ha encontrado el archivo", "ADVERTENCIA!!!", JOptionPane.ERROR_MESSAGE);
            }

        }
        System.out.println(cadena);
        System.out.println("");
    }//GEN-LAST:event_arbolValueChanged

    private void tabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabbedPaneMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_tabbedPaneMouseClicked

    private void btnInicializarCentrosRadialesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicializarCentrosRadialesActionPerformed
        // TODO add your handling code here:
        if (baseRadial.getM() <= 0) {
            JOptionPane.showMessageDialog(this, "No se puede incializar los centros radiales. \n Asegurese de que los datos de entradas han sido cargado", "Inicializacion de Centros Radiales", JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("inicializacion Centros Radiales");
            if (inicializarCentrosRadiales()) {
                JOptionPane.showMessageDialog(this, "Centros Radiales inicializados de manera exitosa.", "Inicializacion de Centros Radiales", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No es posible inicialiazar los Centros Radiales.", "Inicializacion de Centros Radiales", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnInicializarCentrosRadialesActionPerformed

    private void btnIniciarEntrenamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarEntrenamientoActionPerformed
        // TODO add your handling code here:
        if (baseRadial.getM() <= 0) {
            JOptionPane.showMessageDialog(this, "No se puede iniciar el entrenamiento. \n Asegurese de que los datos de entradas han sido cargado", "Entrenamiento de la red", JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("Inicio del entrenamiento de la red");
            if (validarConfiguracion()) {
                baseRadial.setNumeroCentrosRadiales(Integer.parseInt(txtNumeroCentrosRadiales.getText()));
                baseRadial.setErrorOptimo(Double.parseDouble(txtErrorMaximoPermitido.getText()));
//                Thread hilo = new Thread(this);
//                hilo.start();
                entrenar();
            }
        }

    }//GEN-LAST:event_btnIniciarEntrenamientoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        graficarYrVsYd(baseRadial.getYd(), baseRadial.getYr());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tableInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tableInputMethodTextChanged

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Funcion de base radial");
        baseRadial.setFuncionActivacion("Funcion de base radial");

    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        crearArbol();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmBaseRadial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmBaseRadial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmBaseRadial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmBaseRadial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmBaseRadial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbol;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnInicializarCentrosRadiales;
    private javax.swing.JButton btnIniciarEntrenamiento;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelEG;
    private javax.swing.JLabel labelEntradas;
    private javax.swing.JLabel labelPatrones;
    private javax.swing.JLabel labelSalidas;
    private static javax.swing.JPanel panelGraficaEntrenamiento;
    private javax.swing.JPanel panelGraficaYdvsYr;
    private javax.swing.JScrollPane scrol;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtErrorMaximoPermitido;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumeroCentrosRadiales;
    // End of variables declaration//GEN-END:variables

    public void CargarArchivo(File file) {
        try {
            if (file == null) {
                JOptionPane.showMessageDialog(this, "No se ha encontrado el archivo o \n esta inaccesible en estos momentos", "Error de carga", JOptionPane.ERROR_MESSAGE);
            } else {
                FileReader archivos = new FileReader(file);
                try (BufferedReader lee = new BufferedReader(archivos)) {

                    String linea;
                    String json = "";
                    Gson gson = new Gson();
                    while ((linea = lee.readLine()) != null) {
                        json += linea;
                    }
                    try {
                        System.out.println(json);
                        baseRadial = gson.fromJson(json, BaseRadial.class);
                        JOptionPane.showMessageDialog(this, "Datos Cargados Correctamente", "Carga de datos", JOptionPane.INFORMATION_MESSAGE);
                        baseRadial.ObtenerEntradasSalidasPatrones();
                        System.out.println("estradas: " + baseRadial.getM());
                    } catch (JsonSyntaxException e) {
                        System.out.println("Error => " + e.getMessage());
                    }
                }
            }
        } catch (IOException ex) {
            System.out.println("Error => " + ex.getMessage());
        }
    }

    public boolean guardar(BaseRadial baseRadial, String nombre) {
        Gson gson = new Gson();
        String json = gson.toJson(baseRadial);

        File root = null;
        try {
            root = new File(sDirectorio);

            if (!root.exists()) {
                root.mkdirs();
            }

        } catch (Exception e) {
        }

        File directorio = null;
        try {
            directorio = new File(root + "\\" + nombre);

            if (!directorio.exists()) {
                directorio.mkdirs();
            }
        } catch (Exception e) {
        }
        //String nombre, int m, int n, int p, int[] numeroNeuronasCapas, String[] funcion, String algoritmo, double lr, ArrayList pesos, ArrayList umbral
        //Un texto cualquiera guardado en una variable

        try {
            //Crear un objeto File se encarga de crear o abrir acceso a un archivo que se especifica en su constructor
            File archivo = new File(directorio + "\\" + nombre + ".json");
            if (!archivo.exists()) {
                //Crear objeto FileWriter que sera el que nos ayude a escribir sobre archivo
                try (FileWriter fw = new FileWriter(archivo, false)) {
                    PrintWriter pw = new PrintWriter(fw);
                    //Escribimos en el archivo con el metodo write
                    pw.println(json);
                }
            } else {
                int num = directorio.listFiles().length;
                archivo = new File(directorio + "\\" + nombre + " 0." + num + ".json");
                try (FileWriter fw = new FileWriter(archivo, false)) {
                    PrintWriter pw = new PrintWriter(fw);
                    //Escribimos en el archivo con el metodo write
                    pw.println(json);
                }

            }
            return true;
        } //Si existe un problema al escribir cae aqui //Si existe un problema al escribir cae aqui //Si existe un problema al escribir cae aqui //Si existe un problema al escribir cae aqui
        catch (IOException e) {
            System.out.println("Error al escribir" + e);
        }
        return false;
    }

    private void soloNumeros(KeyEvent evt, JTextField text) throws NumberFormatException {
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        // Verificar si la tecla pulsada no es un digito
        if (((caracter < '0') || (caracter > '9')) && (caracter != '\b' /*corresponde a BACK_SPACE*/) && (caracter != '.')) {
            getToolkit().beep();
            evt.consume();  // ignorar el evento de teclado
        }

    }

    private void soloNumerosMenoresAUno(KeyEvent evt, JTextField text) throws NumberFormatException {
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if (text.getText().contains(".")) {
            // Verificar si la tecla pulsada no es un digito
            if (((caracter < '0') || (caracter > '9')) && (caracter != '\b' /*corresponde a BACK_SPACE*/) && (caracter != '.')) {
                getToolkit().beep();
                evt.consume();  // ignorar el evento de teclado
            }
        } else if (!text.getText().isEmpty() && (caracter != '.')) {
            double num = Double.parseDouble(text.getText());
            if (((caracter < '0') || (caracter > '1')) && (caracter != '\b' /*corresponde a BACK_SPACE*/) && (caracter != '.')) {
                getToolkit().beep();
                evt.consume();  // ignorar el evento de teclado
            }
            if (num == 1.0) {
                getToolkit().beep();
                evt.consume();  // ignorar el evento de teclado√∏
            }
        }

        if (caracter == '.' && text.getText().contains(".")) {
            getToolkit().beep();

            evt.consume();
        }
    }

    public void crearArbol() {
        // TODO add your handling code here:
        //create the root node
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Redes Guardadas");
        //create the child nodes
        File f = new File(sDirectorio);
        if (f.exists()) { // Directorio existe 
            File[] ficheros = f.listFiles();
            for (File fichero : ficheros) {
                // System.out.println(fichero.getName());
                DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(fichero.getName());
                File fh = new File(sDirectorio + "\\" + fichero.getName());
                File[] ficherosH = fh.listFiles();
                for (File ficheroH : ficherosH) {
                    //System.out.println(ficheroH.getName());
                    nodo.add(new DefaultMutableTreeNode(ficheroH.getName()));
                }
                root.add(nodo);
            }
        } else {
            f.mkdir();
        }

        //create the tree by passing in the root node
        DefaultTreeModel modelo;
        modelo = new DefaultTreeModel(root);
        arbol.setModel(modelo);
        //arbol.setCellRenderer(new RendererArbol());
        arbol.setEditable(true);
    }

    public void entrenar() {
        baseRadial.setErrorOptimo(Double.parseDouble(txtErrorMaximoPermitido.getText()));
        System.out.println("Inicio de entrenamiento");
        for (int i = 0; i < baseRadial.getX().length; i++) {
            double[] ds = baseRadial.getX()[i];
            for (int j = 0; j < ds.length; j++) {
                double e = ds[j];
                System.out.printf("X[%d][%d]: %f \t", (i + 1), (j + 1), e);
                setText(String.format("X[%d][%d]: %f \t", (i + 1), (j + 1), e));

                //System.out.print("X[" + (i + 1) + "][" + (j + 1) + "]:" + e + "  ");
            }
            System.out.println("");
            setText("\n");

        }

        for (int i = 0; i < baseRadial.getR().length; i++) {
            for (int j = 0; j < baseRadial.getR()[i].length; j++) {
                // r[i][j] = Math.random() * ThreadLocalRandom.current().nextDouble(0, 1 + may);
                //System.out.print("R[" + (i + 1) + "][" + (1 + j) + "]:" + r[i][j] + " ");
                System.out.printf("R[%d][%d]: %f \t", (i + 1), (j + 1), baseRadial.getR()[i][j]);
                setText(String.format("R[%d][%d]: %f \t", (i + 1), (j + 1), baseRadial.getR()[i][j]));

            }

            System.out.println("");
            setText("\n");

        }

        baseRadial.setD(new double[baseRadial.getX().length * baseRadial.getYd()[0].length][baseRadial.getNumeroCentrosRadiales()]);

        for (int i = 0; i < baseRadial.getD().length; i++) {
            for (int j = 0; j < baseRadial.getNumeroCentrosRadiales(); j++) {
                double sum = 0;
                double euclide;
                for (int k = 0; k < baseRadial.getX()[0].length; k++) {
                    double num1 = baseRadial.getX()[i][k];
                    double num2 = baseRadial.getR()[j][k];
                    euclide = num1 - num2;
                    euclide = Math.pow(euclide, 2);
                    sum = sum + euclide;
                }

                baseRadial.getD()[i][j] = Math.sqrt(sum);

                System.out.printf("Distancia[%d][%d]: %f \t", (i + 1), (j + 1), baseRadial.getD()[i][j]);
                setText(String.format("Distancia[%d][%d]: %f \t", (i + 1), (j + 1), baseRadial.getD()[i][j]));
                //System.out.print("Distancia[" + (i + 1) + "][" + (j + 1) + "]:" + d[i][j] + " ");
            }
            System.out.println("");
            setText("\n");

        }
        //Xo*Wo+W1*FA(0.25)+W2*FA(0.75)=1.0
        System.out.println("Salidas: " + baseRadial.getYd()[0].length);
        setText(String.format("Salidas: " + baseRadial.getYd()[0].length));

        for (int h = 0; h < baseRadial.getYd()[0].length; h++) {

            double[][] ecuacion = new double[baseRadial.getX().length * baseRadial.getYd()[0].length][baseRadial.getNumeroCentrosRadiales() + 1];

            for (int i = 0; i < ecuacion.length; i++) {
                for (int j = 0; j < ecuacion[i].length; j++) {
                    if (j == 0) {
                        ecuacion[i][j] = 1;
                    } else {
                        ecuacion[i][j] = baseRadial.activacion(baseRadial.getFuncionActivacion(), baseRadial.getD()[i][j - 1]);
                    }
                }
            }
            System.out.println("Sistemas de ecuaciones");
            setText(String.format("Sistemas de ecuaciones"));
            for (int i = 0; i < ecuacion.length; i++) {
                for (int j = 0; j < ecuacion[i].length; j++) {
                    if (j == 0) {
                        System.out.printf("%d w%d \t", (int) ecuacion[i][j], j);
                        setText(String.format("%d w%d \t", (int) ecuacion[i][j], j));
                    } else {
                        System.out.printf(" %f w%d\t", ecuacion[i][j], j);
                        setText(String.format(" %f w%d\t", ecuacion[i][j], j));
                        // System.out.print("ecuacion[" + (i + 1) + "][" + (j + 1) + "]:" + incognitas[i][j] + " \t");
                    }
                }
                System.out.println("");
                setText(String.format("\n"));
            }

            System.out.println("Salidas deseadas");
            setText(String.format("Salidas deseadas"));
            for (int i = 0; i < baseRadial.getYd().length; i++) {
                for (int j = 0; j < baseRadial.getYd()[i].length; j++) {
                    System.out.printf("Yd[%d][%d]: %f \t", (i + 1), (j + 1), baseRadial.getYd()[i][j]);
                    setText(String.format("Yd[%d][%d]: %f \t", (i + 1), (j + 1), baseRadial.getYd()[i][j]));
                }
                System.out.println("");
                setText(String.format("\n"));
            }

            Matrix A = new Matrix(ecuacion);
            // Matrix b = new Matrix(ydAux, ydAux.length);
            Matrix b = new Matrix(baseRadial.getYd());
            //Calculate Solved Matrix
            Matrix ans = null;
            setText(String.format(""));

            try {
                ans = A.solve(b);
                //Printing Answers
                System.out.println("dimenciones" + ans.getColumnDimension());
                System.out.println("dimenciones" + ans.getRowDimension());
                setText(String.format("dimenciones (%d x %d) \n", ans.getColumnDimension(), ans.getRowDimension()));

                baseRadial.setW(new double[ans.getRowDimension()][ans.getRowDimension()]);
                for (int i = 0; i < ans.getRowDimension(); i++) {
                    for (int j = 0; j < ans.getColumnDimension(); j++) {
                        System.out.printf("w[%d][%d]: %f \t", (i + 1), (j + 1), ans.get(i, j));
                        setText(String.format("w[%d][%d]: %f \t", (i + 1), (j + 1), ans.get(i, j)));
                        baseRadial.getW()[i][j] = ans.get(i, j);
                    }
                }

                System.out.println("");
                System.out.println("Salidas de la red");
                setText(String.format("\nSalidas de la red\n"));
                double[][] Yr = new double[baseRadial.getYd().length][baseRadial.getYd()[0].length];
                for (int i = 0; i < ecuacion.length; i++) {
                    for (int j = 0; j < ecuacion[i].length; j++) {
                        //System.out.printf("%.6f %s", ecuacion[i][j], " ");
                        Yr[i][0] = Yr[i][0] + ans.get(j, 0) * ecuacion[i][j];
                        //System.out.printf("A[%d][%d]: %f \t", (i + 1),(j + 1) ,ecuacion[i][j]);
                        // System.out.print("ecuacion[" + (i + 1) + "][" + (j + 1) + "]:" + incognitas[i][j] + " \t");
                    }
                    System.out.printf("Yr(%d): %f \n", (i + 1), Yr[i][0]);
                    setText(String.format("Yr(%d): %f \n", (i + 1), Yr[i][0]));
                }
                baseRadial.setYr(Yr);
                graficarYrVsYd(baseRadial.getYd(), Yr);
                double[] ep = new double[baseRadial.getX().length];
                double eg = 0;
                for (int i = 0; i < baseRadial.getPatrones(); i++) {
                    ep[i] = baseRadial.getYd()[i][0] - Yr[i][0];
                    System.out.printf("error P[%d]= Yd[%d]:%f - Yr[%d]:%f = %f\n", i, i, baseRadial.getYd()[i][0], i, Yr[i][0], ep[i]);
                    setText(String.format("error P[%d]= Yd[%d]:%f - Yr[%d]:%f = %f\n", i, i, baseRadial.getYd()[i][0], i, Yr[i][0], ep[i]));
                    eg = eg + Math.abs(ep[i]);
                }
                System.out.printf("Erms: %f \n", eg / baseRadial.getPatrones());
                setText(String.format("Erms: %f \n", eg / baseRadial.getPatrones()));

                listaEg.add(eg);
                labelEG.setText("Error EG: " + eg);
                if (eg <= baseRadial.getErrorOptimo()) {
                    JOptionPane.showMessageDialog(null, "Entrenamiento finalizado con exito üòÄüòÉüòÅ");
                } else {
                    JOptionPane.showMessageDialog(null, "Entrenamiento finalizado sin exito üò•üò≠üòû");
                }
                graficarErmsIteracion(listaEg, baseRadial.getErrorOptimo());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "La matriz no tiene solucion");
            }

        }

    }

    private void graficarYrVsYd(double[][] yd, double[][] yr) {

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        System.out.println("yr.length: " + yr.length + " yr[0].length: " + yr[0].length);
        for (int i = 0; i < yr.length; i++) {
            for (int j = 0; j < yr[i].length; j++) {
                dataset.setValue(yd[i][j], "Yd", "patron" + (i + 1));
                dataset.setValue(yr[i][j], "Yr", "patron" + (i + 1));
            }
        }

        JFreeChart chart = createChart(dataset, "Grafica de la simulacion");

        // Ponemos el gr√°fico en un contentPane
        ChartPanel chartPanel = new ChartPanel(chart);
        // Dejamos el tama√±o por defecto
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));

        chartPanel.setBounds(panelGraficaYdvsYr.getBounds());
        panelGraficaYdvsYr.removeAll();
        panelGraficaYdvsYr.setLayout(new java.awt.BorderLayout());
        panelGraficaYdvsYr.add(chartPanel);
        panelGraficaYdvsYr.validate();
    }

    private JFreeChart createChart(DefaultCategoryDataset dataset, String title) {

        JFreeChart chart = ChartFactory.createBarChart3D(title, "Salidas",
                "valores", dataset, // data
                PlotOrientation.VERTICAL, true, // include legend
                true, false);
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        CategoryAxis xAxis = (CategoryAxis) plot.getDomainAxis();
        xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45); // Inclinamos 45 grados las etiquetas del eje X
        plot.setBackgroundAlpha(0.5f);

        //personalizaci√≥n del grafico color de fondo 
        plot.setBackgroundPaint(Color.white);
        //personalizaci√≥n del grafico color de los grit 
        plot.setDomainGridlinePaint(Color.BLACK);
        plot.setRangeGridlinePaint(Color.BLACK);
        // disable bar outlines...
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        // set up gradient paints for series...
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.orange,
                0.0f, 0.0f, new Color(0, 0, 64)
        );
        GradientPaint gp1 = new GradientPaint(
                0.0f, 0.0f, Color.blue,
                0.0f, 0.0f, new Color(0, 64, 0)
        );
        GradientPaint gp2 = new GradientPaint(
                0.0f, 0.0f, Color.green,
                0.0f, 0.0f, new Color(64, 0, 0)
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        return chart;
    }

    private void graficarErmsIteracion(ArrayList listaErrorOptimo, double eg) {
        // TODO add your handling code here:

        XYSeries sErms;//serie Erms
        XYSeries sIteraciones;//serie Iteraciones
        //titulos de las dos lineas que se graficaran
        sErms = new XYSeries("error optimo");
        sIteraciones = new XYSeries("EG");
        // ejemplo de valores que puedo cargar en la serie

        for (int i = 0; i < listaErrorOptimo.size(); i++) {
            sIteraciones.add(i, (double) listaErrorOptimo.get(i));
            sErms.add(i, eg);
            if (listaErrorOptimo.size() < 2) {
                sIteraciones.add(i, (double) listaErrorOptimo.get(i));
                sErms.add(i, eg);
            }
        }

        //creo un contenedor que me almacenara el valor de las do series
        XYSeriesCollection xySeriesColletion = new XYSeriesCollection();

        //almaceno cada serie en el contendor
        xySeriesColletion.addSeries(sErms);
        xySeriesColletion.addSeries(sIteraciones);

        XYDataset contenedor = xySeriesColletion;
        //creo un marco de para que se pueda visualizar en la pantalla
        JFreeChart marco = ChartFactory.createXYLineChart("Graficando los error EG y el Error de aproximacion optimo", "Interaciones", "EG", contenedor, PlotOrientation.VERTICAL, true, true, true);

        // Mostramos la grafica dentro del jPanel1
        ChartPanel panel = new ChartPanel(marco);
        panel.setBounds(panelGraficaEntrenamiento.getBounds());
        panelGraficaEntrenamiento.removeAll();
        panelGraficaEntrenamiento.setLayout(new java.awt.BorderLayout());
        panelGraficaEntrenamiento.add(panel);
        panelGraficaEntrenamiento.validate();
    }

    private boolean validarConfiguracion() {
        if (txtNumeroCentrosRadiales.getText().isEmpty() || "0".equals(txtNumeroCentrosRadiales.getText())) {
            JOptionPane.showMessageDialog(null, "El campo  Numero Iteraciones no puede ser nulo o igual a cero", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            txtNumeroCentrosRadiales.requestFocus();
        } else if (txtErrorMaximoPermitido.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo Error Maximo Permitido no puede ser nulo ", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            txtErrorMaximoPermitido.requestFocus();
        } else if (baseRadial.getFuncionActivacion() == null || baseRadial.getFuncionActivacion().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo Funcion de activacion no puede ser nulo", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            jRadioButton1.requestFocus();
        } else {
            return true;
        }
        return false;
    }

    @Override
    public void run() {
        entrenar();
    }

    private void mostrarDatosParaSimular() {
        int fil = baseRadial.getPatrones();
        int col = baseRadial.getM();

        String cad[] = new String[col + 1];
        for (int i = 0; i < col; i++) {
            cad[i] = "x" + (i + 1);
        }

        cad[baseRadial.getM()] = "seleccionado";

        Class[] tipo = new Class[col];
        for (int i = 0; i < col; i++) {
            tipo[i] = java.lang.Double.class;
        }

        Object ob[][] = new Object[fil][col];
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                ob[i][j] = baseRadial.getX()[i][j];
            }
        }

        table.setModel(new javax.swing.table.DefaultTableModel(ob, cad) {
            Class[] types = tipo;

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });

//        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        table.setColumnSelectionAllowed(true);
//        table.getTableHeader().setReorderingAllowed(false);
//        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        addCheckBox(baseRadial.getM(), table);
    }

    public void addCheckBox(int column, JTable table) {
        TableColumn tc = table.getColumnModel().getColumn(column);
        tc.setCellEditor(table.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(table.getDefaultRenderer(Boolean.class));
    }

    public boolean isSelected(int row, int column, JTable table) {
        return table.getValueAt(row, column) != null;
    }

    private void setText(String format) {

    }

    private boolean inicializarCentrosRadiales() {
        baseRadial.setNumeroCentrosRadiales(Integer.parseInt(txtNumeroCentrosRadiales.getText()));
        if (baseRadial.getNumeroCentrosRadiales() <= 0) {
            return false;
        } else {
            baseRadial.setR(new double[baseRadial.getNumeroCentrosRadiales()][baseRadial.getX()[0].length]);

            double may = baseRadial.getX()[0][0];
            for (double[] x1 : baseRadial.getX()) {
                for (int j = 0; j < x1.length; j++) {
                    if (x1[j] > may) {
                        may = x1[j];
                    }
                }
            }

            double menor = baseRadial.getX()[0][0];
            for (double[] x1 : baseRadial.getX()) {
                for (int j = 0; j < x1.length; j++) {
                    if (x1[j] < menor) {
                        menor = x1[j];
                    }
                }
            }

            System.out.println("El numero maximo es : " + may);
            System.out.println("El numero Minimo es : " + menor);

            System.out.println("Mostrando centros radiales");
            setText("Mostrando centros radiales \n");

            for (int i = 0; i < baseRadial.getR().length; i++) {
                for (int j = 0; j < baseRadial.getR()[i].length; j++) {
                    baseRadial.getR()[i][j] = Math.random() * ThreadLocalRandom.current().nextDouble(menor, 1 + may);
                    System.out.printf("R[%d][%d]: %f \t", (i + 1), (j + 1), baseRadial.getR()[i][j]);
                    setText(String.format("R[%d][%d]: %f \t", (i + 1), (j + 1), baseRadial.getR()[i][j]));
                }
                System.out.println("");
                setText("\n");
            }

            System.out.println("finalizacion de la inicializacion de centros radiales");
            setText("finalizacion de la inicializacion de centros radiales\n");
            return true;
        }
    }
}
