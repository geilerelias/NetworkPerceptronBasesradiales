/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network;

import clases.CeldaRenderer;
import clases.PerceptronMulticapa;
import clases.PerceptronSimple;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.Math.abs;
import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gers
 */
public class FrmPerceptronMulticapa extends javax.swing.JFrame implements Runnable {

    private PerceptronMulticapa pm;
    

    private final Object[] HEADER_NAME = new Object[]{"Numero de neuronas", "Funcion Activacion"};
    private DefaultTableModel model = new DefaultTableModel(
            new Object[][]{},
            HEADER_NAME);

    private void crearTablaCombo() {
        int numero = (int) spnNumeroCapasOcultas.getValue();
        if (numero > 0) {
            System.out.println("Numeros de capas " + numero);
            Object[][] obj = new Object[numero][2];
            for (int i = 0; i < numero; i++) {
                for (int j = 0; j < 2; j++) {
                    if (j == 0) {
                        obj[i][j] = 0;
                    } else {
                        obj[i][j] = "selecciona";
                    }

                }
            }
            model = new DefaultTableModel(obj,
                    HEADER_NAME);

            //Combo y valores
            JComboBox comboBox = new JComboBox();
            comboBox.addItem("Sigmoidal");
            comboBox.addItem("TanSigmoidal");
            comboBox.addItem("TanHiperbolica");
            comboBox.addItem("Gaussiana");
            comboBox.addItem("Seno");
            comboBox.addItem("Coseno");

            //se agrega model al JTable
            jTable1.setModel(model);
            //se indica que columna tendra el JComboBox
            jTable1.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(comboBox));
            jTable1.setDefaultRenderer(Object.class, new CeldaRenderer(1));
        } else {
            JOptionPane.showMessageDialog(this, "Ingresa un valor diferente a cero(0)");
        }
    }

    /**
     * Creates new form Main
     */
    public FrmPerceptronMulticapa() {
        initComponents();
        pm = new PerceptronMulticapa();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel6 = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        btnIniciarEntrenamiento = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnCargar = new javax.swing.JButton();
        labelEntradas = new javax.swing.JLabel();
        labelSalidas = new javax.swing.JLabel();
        labelPatrones = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        txtNumeroIteraciones = new javax.swing.JTextField();
        txtErrorMaximoPermitido = new javax.swing.JTextField();
        txtTasaAprendizaje = new javax.swing.JTextField();
        btnInicializarPesosUmbrales = new javax.swing.JButton();
        panelGraficaEntrenamiento = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        spnNumeroCapasOcultas = new javax.swing.JSpinner();
        cbxFuncionActivacionSalida = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        labelErms = new javax.swing.JLabel();
        labelIteracion = new javax.swing.JLabel();
        panelGraficaYrVsYd = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        scrol = new javax.swing.JScrollPane();
        arbol = new javax.swing.JTree();
        panelSimulacionGeneral = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setMaximumSize(new java.awt.Dimension(785, 727));
        jPanel6.setMinimumSize(new java.awt.Dimension(785, 727));
        jPanel6.setPreferredSize(new java.awt.Dimension(785, 727));

        tabbedPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabbedPaneMouseClicked(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        btnIniciarEntrenamiento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-inteligencia-artificial-25.png"))); // NOI18N
        btnIniciarEntrenamiento.setText("Entrenar");
        btnIniciarEntrenamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarEntrenamientoActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCargar.setForeground(new java.awt.Color(0, 0, 51));
        btnCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-subir-documento-25.png"))); // NOI18N
        btnCargar.setText("Cargar Patrones");
        btnCargar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        labelEntradas.setForeground(new java.awt.Color(0, 0, 51));
        labelEntradas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-m√∫ltiples-entradas-25.png"))); // NOI18N
        labelEntradas.setText("Entradas: 0");

        labelSalidas.setForeground(new java.awt.Color(0, 0, 51));
        labelSalidas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-salida-25.png"))); // NOI18N
        labelSalidas.setText("Salidas: 0");

        labelPatrones.setForeground(new java.awt.Color(0, 0, 51));
        labelPatrones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-spotted-patterns-25.png"))); // NOI18N
        labelPatrones.setText("Patrones: 0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSalidas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPatrones, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCargar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelEntradas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelSalidas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelPatrones))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-proceso-25.png"))); // NOI18N
        jLabel29.setText("Numero de Iteraciones");

        jLabel30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-goal-25.png"))); // NOI18N
        jLabel30.setText("Error Maximo");

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-progressbar95-25.png"))); // NOI18N
        jLabel31.setText("Rata de Aprendizaje");

        txtNumeroIteraciones.setText("0");
        txtNumeroIteraciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumeroIteracionesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumeroIteracionesKeyTyped(evt);
            }
        });

        txtErrorMaximoPermitido.setText("0");
        txtErrorMaximoPermitido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtErrorMaximoPermitidoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtErrorMaximoPermitidoKeyTyped(evt);
            }
        });

        txtTasaAprendizaje.setText("0");
        txtTasaAprendizaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTasaAprendizajeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTasaAprendizajeKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtErrorMaximoPermitido, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                    .addComponent(txtNumeroIteraciones)
                    .addComponent(txtTasaAprendizaje))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumeroIteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtErrorMaximoPermitido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(txtTasaAprendizaje, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnInicializarPesosUmbrales.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-inform√°tica-25.png"))); // NOI18N
        btnInicializarPesosUmbrales.setText("Inicializar pesos ");
        btnInicializarPesosUmbrales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicializarPesosUmbralesActionPerformed(evt);
            }
        });

        panelGraficaEntrenamiento.setBackground(new java.awt.Color(255, 255, 255));
        panelGraficaEntrenamiento.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelGraficaEntrenamiento.setAutoscrolls(true);
        panelGraficaEntrenamiento.setMaximumSize(new java.awt.Dimension(765, 235));
        panelGraficaEntrenamiento.setMinimumSize(new java.awt.Dimension(765, 235));
        panelGraficaEntrenamiento.setName(""); // NOI18N
        panelGraficaEntrenamiento.setPreferredSize(new java.awt.Dimension(765, 235));

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(102, 102, 102));
        jLabel39.setText("Grafica Error Maximo Permitido vs Iteraciones");

        javax.swing.GroupLayout panelGraficaEntrenamientoLayout = new javax.swing.GroupLayout(panelGraficaEntrenamiento);
        panelGraficaEntrenamiento.setLayout(panelGraficaEntrenamientoLayout);
        panelGraficaEntrenamientoLayout.setHorizontalGroup(
            panelGraficaEntrenamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficaEntrenamientoLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel39)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelGraficaEntrenamientoLayout.setVerticalGroup(
            panelGraficaEntrenamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficaEntrenamientoLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(jLabel39)
                .addContainerGap(112, Short.MAX_VALUE))
        );

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-abrir-archivo-bajo-cursor-25.png"))); // NOI18N
        jButton3.setText("Guardar configuraci√≥n");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-signing-a-document-25.png"))); // NOI18N
        jLabel32.setText("Nombre de la red");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-directorio-activo-25.png"))); // NOI18N
        jLabel1.setText("Reglas de entrenamiento");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Delta");
        jRadioButton1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton1StateChanged(evt);
            }
        });
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        jRadioButton1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jRadioButton1PropertyChange(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Delta modificada");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2))
                    .addComponent(jLabel1))
                .addGap(143, 143, 143))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-capas-25.png"))); // NOI18N
        jLabel2.setText("Numero de capas ocultas");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable1);

        spnNumeroCapasOcultas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnNumeroCapasOcultasStateChanged(evt);
            }
        });
        spnNumeroCapasOcultas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spnNumeroCapasOcultasKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                spnNumeroCapasOcultasKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                spnNumeroCapasOcultasKeyTyped(evt);
            }
        });

        cbxFuncionActivacionSalida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lineal", "Sigmoidal", "TanSigmoidal", "TanHiperbolica", "Gaussiana", "Seno", "Coseno" }));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-coseno-24.png"))); // NOI18N
        jLabel4.setText("Funcion Capa salida");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-someter-para-aprobacion-24.png"))); // NOI18N
        jButton2.setText("Aplicar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnNumeroCapasOcultas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(cbxFuncionActivacionSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnNumeroCapasOcultas, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxFuncionActivacionSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addGap(177, 177, 177))
        );

        labelErms.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-punto-de-dolor-24.png"))); // NOI18N
        labelErms.setText("Error Erms: ");

        labelIteracion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-actualizar-24.png"))); // NOI18N
        labelIteracion.setText("Iteracion: ");

        panelGraficaYrVsYd.setBackground(new java.awt.Color(255, 255, 255));
        panelGraficaYrVsYd.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelGraficaYrVsYd.setAutoscrolls(true);
        panelGraficaYrVsYd.setMaximumSize(new java.awt.Dimension(420, 128));
        panelGraficaYrVsYd.setMinimumSize(new java.awt.Dimension(420, 128));
        panelGraficaYrVsYd.setName(""); // NOI18N

        jLabel41.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(102, 102, 102));
        jLabel41.setText("Grafica Yd vs Yr");

        javax.swing.GroupLayout panelGraficaYrVsYdLayout = new javax.swing.GroupLayout(panelGraficaYrVsYd);
        panelGraficaYrVsYd.setLayout(panelGraficaYrVsYdLayout);
        panelGraficaYrVsYdLayout.setHorizontalGroup(
            panelGraficaYrVsYdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficaYrVsYdLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel41)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelGraficaYrVsYdLayout.setVerticalGroup(
            panelGraficaYrVsYdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficaYrVsYdLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jLabel41)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(labelIteracion, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(labelErms, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnIniciarEntrenamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(btnInicializarPesosUmbrales)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(panelGraficaEntrenamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelGraficaYrVsYd, javax.swing.GroupLayout.PREFERRED_SIZE, 309, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labelIteracion)
                    .addComponent(labelErms)
                    .addComponent(btnInicializarPesosUmbrales)
                    .addComponent(btnIniciarEntrenamiento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelGraficaEntrenamiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelGraficaYrVsYd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel4);

        tabbedPane.addTab("Entrenamiento", jScrollPane1);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        scrol.setBorder(null);

        arbol.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JTree");
        arbol.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        arbol.setAutoscrolls(true);
        arbol.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arbolValueChanged(evt);
            }
        });
        scrol.setViewportView(arbol);

        panelSimulacionGeneral.setBackground(new java.awt.Color(255, 255, 255));
        panelSimulacionGeneral.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel40.setText("Grafica Simulacion");

        javax.swing.GroupLayout panelSimulacionGeneralLayout = new javax.swing.GroupLayout(panelSimulacionGeneral);
        panelSimulacionGeneral.setLayout(panelSimulacionGeneralLayout);
        panelSimulacionGeneralLayout.setHorizontalGroup(
            panelSimulacionGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelSimulacionGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelSimulacionGeneralLayout.createSequentialGroup()
                    .addGap(0, 229, Short.MAX_VALUE)
                    .addComponent(jLabel40)
                    .addGap(0, 228, Short.MAX_VALUE)))
        );
        panelSimulacionGeneralLayout.setVerticalGroup(
            panelSimulacionGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
            .addGroup(panelSimulacionGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelSimulacionGeneralLayout.createSequentialGroup()
                    .addGap(0, 111, Short.MAX_VALUE)
                    .addComponent(jLabel40)
                    .addGap(0, 111, Short.MAX_VALUE)))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-red-25.png"))); // NOI18N
        jButton1.setText("Simular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tableInputMethodTextChanged(evt);
            }
        });
        jScrollPane2.setViewportView(table);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrol, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                    .addComponent(panelSimulacionGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrol, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelSimulacionGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabbedPane.addTab("Simulaci√≥n", jPanel3);

        jPanel5.setBackground(java.awt.SystemColor.controlHighlight);

        jLabel15.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/network/images/icons8-mapa-mental-50.png"))); // NOI18N
        jLabel15.setText("Perceptron Multicapa");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel15)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.getAccessibleContext().setAccessibleName("Entrenamiento");
        tabbedPane.getAccessibleContext().setAccessibleDescription("Entrenamiento");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir") + "\\src\\network\\data");

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            CargarArchivo(file);

            restablecerDatosCargados();
        } else {
            JOptionPane.showMessageDialog(null, "\nOpeeracion cancelada por el usuario", "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void restablecerDatosCargados() {
        labelEntradas.setText("Entradas: " + pm.getM());
        labelPatrones.setText("Patrones: " + pm.getPatrones());
        labelSalidas.setText("Salidas: " + pm.getN());
        txtErrorMaximoPermitido.setText(String.valueOf(pm.getGoal()));
        txtNumeroIteraciones.setText(String.valueOf(pm.getEpoch()));
        txtTasaAprendizaje.setText(String.valueOf(pm.getLr()));
        spnNumeroCapasOcultas.setValue(pm.getNumeroCapasOcultas().length);
        crearTablaCombo();
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < model.getColumnCount(); j++) {
                if (j == 0) {
                    model.setValueAt(pm.getNumeroCapasOcultas()[i], i, j);
                } else {
                    Object obj = pm.getFuncionesActivacion()[i];
                    //model.SetValueAt(obj,i, j);
                    model.setValueAt(obj, i, j);
                }
            }
            System.out.println();
        }
        
        if ("reglaDelta".equals(pm.getAlgoritmo())) {
            jRadioButton1.setSelected(true);
        } else if ("reglaDeltaModificada".equals(pm.getAlgoritmo())) {
            jRadioButton2.setSelected(true);
        }//fin regla reglaDelta modificada

        cbxFuncionActivacionSalida.setSelectedItem(pm.getFuncionesActivacion()[pm.getNumeroCapasOcultas().length]);
        btnInicializarPesosUmbrales.setEnabled(true);
    }

    private void txtNumeroIteracionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroIteracionesKeyTyped
        soloNumeros(evt, txtNumeroIteraciones);
    }//GEN-LAST:event_txtNumeroIteracionesKeyTyped


    private void txtErrorMaximoPermitidoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtErrorMaximoPermitidoKeyReleased
        // TODO add your handling code here:
        if (!txtErrorMaximoPermitido.getText().isEmpty()) {
            double num = Double.parseDouble(txtErrorMaximoPermitido.getText());
            if (num > 1.0) {
                txtErrorMaximoPermitido.setText("0.0");
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_txtErrorMaximoPermitidoKeyReleased

    private void txtTasaAprendizajeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTasaAprendizajeKeyReleased
        // TODO add your handling code here:
        if (!txtTasaAprendizaje.getText().isEmpty() && !"".equals(txtTasaAprendizaje.getText())) {
            double num = Double.parseDouble(txtTasaAprendizaje.getText());
            if (num > 1.0) {
                txtTasaAprendizaje.setText("0.0");
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_txtTasaAprendizajeKeyReleased

    private void txtNumeroIteracionesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroIteracionesKeyReleased
        // TODO add your handling code here:
        if (!txtNumeroIteraciones.getText().isEmpty() && !"".equals(txtNumeroIteraciones.getText())) {
            double num = Double.parseDouble(txtNumeroIteraciones.getText());
            if (num > 1000) {
                txtNumeroIteraciones.setText("1000");
                getToolkit().beep();
            }
        }
    }//GEN-LAST:event_txtNumeroIteracionesKeyReleased

    private void txtErrorMaximoPermitidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtErrorMaximoPermitidoKeyTyped
        // TODO add your handling code here:
        soloNumerosMenoresAUno(evt, txtErrorMaximoPermitido);
    }//GEN-LAST:event_txtErrorMaximoPermitidoKeyTyped

    private void txtTasaAprendizajeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTasaAprendizajeKeyTyped
        // TODO add your handling code here:
        soloNumerosMenoresAUno(evt, txtTasaAprendizaje);
    }//GEN-LAST:event_txtTasaAprendizajeKeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (pm.getM() <= 0) {
            JOptionPane.showMessageDialog(this, "Nada que guardar. \n Asegurese de que los datos de entradas han sido cargado", "Guardando configuracion de la red", JOptionPane.ERROR_MESSAGE);
        } else if (pm.getPesos() == null) {
            JOptionPane.showMessageDialog(this, "Nada para guardar. \n Asegurese de que los Pesos y umbrales se han inicilizado de manera correcta", "Guardando configuracion de la red", JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("Guardando configuracion de la red");
            if (txtNombre.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El nombre del archivo no puede estar en blanco.", "Guardando configuracion de la red", JOptionPane.ERROR_MESSAGE);
                txtNombre.requestFocus();
            } else {
                if (guardar(pm, txtNombre.getText())) {
                    JOptionPane.showMessageDialog(this, "Configuracion guardada de manera exitosa", "Guardando configuracion de la red", JOptionPane.INFORMATION_MESSAGE);

                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void arbolValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_arbolValueChanged
        // TODO add your handling code here:
        TreePath path = evt.getPath();
        Object[] nodos = path.getPath();
        System.out.print("Path seleccionado: ");
        String cadena = System.getProperty("user.dir") + "\\src\\network\\";
        int i = 0;
        for (Object nodo : nodos) {
            if (i++ == 0) {
                cadena = cadena + "saved\\";
            } else {
                System.out.print(nodo.toString() + " | ");
                cadena = cadena + nodo.toString() + "\\";
            }

        }
        cadena = cadena.trim();
        cadena = cadena.substring(0, cadena.length() - 1);

        if (cadena.contains(".")) {

            File file = new File(cadena);
            try {
                if (file == null) {
                    JOptionPane.showMessageDialog(null, "No se ha encontrado el archivo o \n esta inaccesible en estos momentos", "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
                } else {
                    FileReader archivos = new FileReader(file);
                    BufferedReader lee = new BufferedReader(archivos);
                    String linea;
                    String json = "";

                    Gson gson = new Gson();

                    while ((linea = lee.readLine()) != null) {
                        json += linea;
                    }

                    pm = gson.fromJson(json, PerceptronMulticapa.class);
                    pm.ObtenerEntradasSalidasPatrones();
                    restablecerDatosCargados();
                    mostrarDatosParaSimular();

                    lee.close();
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex + "" + "\nNo se ha encontrado el archivo", "ADVERTENCIA!!!", JOptionPane.ERROR_MESSAGE);
            }

        }
        System.out.println(cadena);
        System.out.println("");
    }//GEN-LAST:event_arbolValueChanged

    private void tabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabbedPaneMouseClicked
        // TODO add your handling code here:
        if (tabbedPane.getSelectedIndex() == 1) {
            crearArbol();
        }

    }//GEN-LAST:event_tabbedPaneMouseClicked

    private void btnInicializarPesosUmbralesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicializarPesosUmbralesActionPerformed
        // TODO add your handling code here:
        if (pm.getM() <= 0) {
            JOptionPane.showMessageDialog(this, "No se puede incializar los pesos y umbrales. \n Asegurese de que los datos de entradas han sido cargado", "Inicializacion de Pesos y umbrales", JOptionPane.ERROR_MESSAGE);
        } else if ((int) spnNumeroCapasOcultas.getValue() == 0) {
            JOptionPane.showMessageDialog(this, "No se puede incializar los pesos y umbrales. \n Asegurese de que las capas ocultas se inicializaron de manera correcta", "Inicializacion de Pesos y umbrales", JOptionPane.ERROR_MESSAGE);
            spnNumeroCapasOcultas.requestFocus();
        } else {

            String[] funcionActivacion = new String[(int) spnNumeroCapasOcultas.getValue() + 1];
            int[] numeroCapasOcultas = new int[(int) spnNumeroCapasOcultas.getValue()];
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    if (j == 0) {
                        numeroCapasOcultas[i] = Integer.parseInt(model.getValueAt(i, j).toString());
                        System.out.printf("Numero capa Oculta %d = %d \t", i, numeroCapasOcultas[i]);
                    } else {
                        funcionActivacion[i] = model.getValueAt(i, j).toString();
                        System.out.printf("Funcion activacion capa Oculta %d =%s \t", i, funcionActivacion[i]);
                    }
                }
                System.out.println();
            }
            funcionActivacion[funcionActivacion.length - 1] = cbxFuncionActivacionSalida.getSelectedItem().toString();

            pm.setFuncionesActivacion(funcionActivacion);
            pm.setNumeroCapasOcultas(numeroCapasOcultas);

            System.out.println("inicializacion de pesos y umbrales");
            if (inicializarPesosUmbrales()) {
                JOptionPane.showMessageDialog(this, "Pesos y umbrales inicializados de manera exitosa.", "Inicializacion de Pesos y umbrales", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No es posible inicialiazar los Pesos y umbrales.", "Inicializacion de Pesos y umbrales", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnInicializarPesosUmbralesActionPerformed

    private void btnIniciarEntrenamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarEntrenamientoActionPerformed
        // TODO add your handling code here:
        if (pm.getM() <= 0) {
            JOptionPane.showMessageDialog(this, "No se puede iniciar el entrenamiento. \n Asegurese de que los datos de entradas han sido cargado", "Entrenamiento de la red", JOptionPane.ERROR_MESSAGE);
        } else if (pm.getPesos() == null) {
            JOptionPane.showMessageDialog(this, "No se puede incia el entrenamiento de la red. \n Asegurese de que los Pesos y umbrales se han inicilizado de manera correcta", "Entrenamiento de la red", JOptionPane.ERROR_MESSAGE);
        } else {
            System.out.println("Inicio del entrenamiento de la red");
            if (validarConfiguracion()) {

                pm.setEpoch(Integer.parseInt(txtNumeroIteraciones.getText()));
                pm.setLr(Double.parseDouble(txtTasaAprendizaje.getText()));
                pm.setGoal(Double.parseDouble(txtErrorMaximoPermitido.getText()));
                Thread hilo = new Thread(this);
                hilo.start();
//                entrenar();
            }
        }

    }//GEN-LAST:event_btnIniciarEntrenamientoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("");
        System.out.println("________________________________");
        System.out.println("********** simulacion*************");
        System.out.println("________________________________");
        ArrayList<double[]> list = new ArrayList();
        double[] vect = null;
        double[][] xSimulacion;

        for (int i = 0; i < table.getRowCount(); i++) {
            if (isSelected(i, pm.getM(), table)) {
                vect = new double[pm.getM()];
                for (int j = 0; j < pm.getM(); j++) {
                    vect[j] = (double) table.getValueAt(i, j);
                    System.out.println(" vect[" + j + "]: " + vect[j]);
                }
                list.add(vect);
            }
        }
        System.out.println("list size: " + list.size() + " entradas: " + pm.getM());

        xSimulacion = new double[list.size()][pm.getM()];
        if (vect != null) {
            System.out.println("size: " + list.size());
            for (double[] list1 : list) {

            }
            for (int i = 0; i < list.size(); i++) {
                double[] aux = (double[]) list.get(i);
                for (int j = 0; j < aux.length; j++) {
                    System.out.println("aux: " + aux[j]);
                    xSimulacion[i][j] = aux[j];
                }
            }
        }
        if (xSimulacion.length == 0) {
            graficarSimulacion(simular(pm.getX()));
        } else {
            graficarSimulacion(simular(xSimulacion));
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tableInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tableInputMethodTextChanged

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("reglaDelta");
        pm.setAlgoritmo("reglaDelta");

    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        System.out.println("reglaDeltaModificada");
        pm.setAlgoritmo("reglaDeltaModificada");

    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void spnNumeroCapasOcultasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnNumeroCapasOcultasStateChanged
        // TODO add your handling code here:
        crearTablaCombo();
    }//GEN-LAST:event_spnNumeroCapasOcultasStateChanged

    private void spnNumeroCapasOcultasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnNumeroCapasOcultasKeyReleased
        // TODO add your handling code here:
        System.out.println("release");
        crearTablaCombo();
    }//GEN-LAST:event_spnNumeroCapasOcultasKeyReleased

    private void spnNumeroCapasOcultasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnNumeroCapasOcultasKeyTyped
        // TODO add your handling code here:
        System.out.println("typed");
        crearTablaCombo();
    }//GEN-LAST:event_spnNumeroCapasOcultasKeyTyped

    private void spnNumeroCapasOcultasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnNumeroCapasOcultasKeyPressed
        // TODO add your handling code here:
        System.out.println("typed");
        crearTablaCombo();
    }//GEN-LAST:event_spnNumeroCapasOcultasKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        crearTablaCombo();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jRadioButton1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jRadioButton1PropertyChange
         // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1PropertyChange

    private void jRadioButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton1StateChanged
         // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPerceptronMulticapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPerceptronMulticapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPerceptronMulticapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPerceptronMulticapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPerceptronMulticapa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbol;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnInicializarPesosUmbrales;
    private javax.swing.JButton btnIniciarEntrenamiento;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxFuncionActivacionSalida;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelEntradas;
    private javax.swing.JLabel labelErms;
    private javax.swing.JLabel labelIteracion;
    private javax.swing.JLabel labelPatrones;
    private javax.swing.JLabel labelSalidas;
    private static javax.swing.JPanel panelGraficaEntrenamiento;
    private static javax.swing.JPanel panelGraficaYrVsYd;
    private javax.swing.JPanel panelSimulacionGeneral;
    private javax.swing.JScrollPane scrol;
    private javax.swing.JSpinner spnNumeroCapasOcultas;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtErrorMaximoPermitido;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumeroIteraciones;
    private javax.swing.JTextField txtTasaAprendizaje;
    // End of variables declaration//GEN-END:variables

    public void CargarArchivo(File file) {
        try {
            if (file == null) {
                JOptionPane.showMessageDialog(this, "No se ha encontrado el archivo o \n esta inaccesible en estos momentos", "Error de carga", JOptionPane.ERROR_MESSAGE);
            } else {
                FileReader archivos = new FileReader(file);
                try (BufferedReader lee = new BufferedReader(archivos)) {

                    String linea;
                    String json = "";
                    Gson gson = new Gson();
                    while ((linea = lee.readLine()) != null) {
                        json += linea;
                    }
                    try {
                        System.out.println(json);
                        pm = gson.fromJson(json, PerceptronMulticapa.class);
                        JOptionPane.showMessageDialog(this, "Datos Cargados Correctamente", "Carga de datos", JOptionPane.INFORMATION_MESSAGE);
                        pm.ObtenerEntradasSalidasPatrones();
                        System.out.println("estradas: " + pm.getM());
                    } catch (JsonSyntaxException e) {
                        System.out.println("Error => " + e.getMessage());
                    }
                }
            }
        } catch (IOException ex) {
            System.out.println("Error => " + ex.getMessage());
        }
    }

    public boolean guardar(PerceptronMulticapa perceptron, String nombre) {
        Gson gson = new Gson();
        String json = gson.toJson(perceptron);

        File root = null;
        try {
            root = new File(System.getProperty("user.dir") + "\\src\\network\\saved");

            if (!root.exists()) {
                root.mkdirs();
            }

        } catch (Exception e) {
        }

        File directorio = null;
        try {
            directorio = new File(root + "\\" + nombre);

            if (!directorio.exists()) {
                directorio.mkdirs();
            }
        } catch (Exception e) {
        }
        //String nombre, int m, int n, int p, int[] numeroNeuronasCapas, String[] funcion, String algoritmo, double lr, ArrayList pesos, ArrayList umbral
        //Un texto cualquiera guardado en una variable

        try {
            //Crear un objeto File se encarga de crear o abrir acceso a un archivo que se especifica en su constructor
            File archivo = new File(directorio + "\\" + nombre + ".json");
            if (!archivo.exists()) {
                //Crear objeto FileWriter que sera el que nos ayude a escribir sobre archivo
                try (FileWriter fw = new FileWriter(archivo, false)) {
                    PrintWriter pw = new PrintWriter(fw);
                    //Escribimos en el archivo con el metodo write
                    pw.println(json);
                }
            } else {
                int num = directorio.listFiles().length;
                archivo = new File(directorio + "\\" + nombre + " 0." + num + ".json");
                try (FileWriter fw = new FileWriter(archivo, false)) {
                    PrintWriter pw = new PrintWriter(fw);
                    //Escribimos en el archivo con el metodo write
                    pw.println(json);
                }

            }
            return true;
        } //Si existe un problema al escribir cae aqui //Si existe un problema al escribir cae aqui //Si existe un problema al escribir cae aqui //Si existe un problema al escribir cae aqui
        catch (IOException e) {
            System.out.println("Error al escribir" + e);
        }
        return false;
    }

    private void soloNumeros(KeyEvent evt, JTextField text) throws NumberFormatException {
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        // Verificar si la tecla pulsada no es un digito
        if (((caracter < '0') || (caracter > '9')) && (caracter != '\b' /*corresponde a BACK_SPACE*/) && (caracter != '.')) {
            getToolkit().beep();
            evt.consume();  // ignorar el evento de teclado
        }

    }

    private void soloNumerosMenoresAUno(KeyEvent evt, JTextField text) throws NumberFormatException {
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if (text.getText().contains(".")) {
            // Verificar si la tecla pulsada no es un digito
            if (((caracter < '0') || (caracter > '9')) && (caracter != '\b' /*corresponde a BACK_SPACE*/) && (caracter != '.')) {
                getToolkit().beep();
                evt.consume();  // ignorar el evento de teclado
            }
        } else if (!text.getText().isEmpty() && (caracter != '.')) {
            double num = Double.parseDouble(text.getText());
            if (((caracter < '0') || (caracter > '1')) && (caracter != '\b' /*corresponde a BACK_SPACE*/) && (caracter != '.')) {
                getToolkit().beep();
                evt.consume();  // ignorar el evento de teclado
            }
            if (num == 1.0) {
                getToolkit().beep();
                evt.consume();  // ignorar el evento de teclado√∏
            }
        }

        if (caracter == '.' && text.getText().contains(".")) {
            getToolkit().beep();

            evt.consume();
        }
    }

    public void crearArbol() {
        // TODO add your handling code here:
        //create the root node
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Redes Guardadas");
        //create the child nodes
        String sDirectorio = System.getProperty("user.dir") + "\\src\\network\\saved";
        File f = new File(sDirectorio);
        if (f.exists()) { // Directorio existe 
            File[] ficheros = f.listFiles();
            for (File fichero : ficheros) {
                // System.out.println(fichero.getName());
                DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(fichero.getName());
                File fh = new File(sDirectorio + "\\" + fichero.getName());
                File[] ficherosH = fh.listFiles();
                for (File ficheroH : ficherosH) {
                    //System.out.println(ficheroH.getName());
                    nodo.add(new DefaultMutableTreeNode(ficheroH.getName()));
                }
                root.add(nodo);
            }
        } else {
            f.mkdir();
        }

        //create the tree by passing in the root node
        DefaultTreeModel modelo;
        modelo = new DefaultTreeModel(root);
        arbol.setModel(modelo);
        //arbol.setCellRenderer(new RendererArbol());
        arbol.setEditable(true);
    }

    public void entrenar() {
        System.out.println("entrenamiento de la red neuronal");
        double erms = 0;
        ArrayList listaErrores = new ArrayList();
        ArrayList<double[]> yAux = new ArrayList<>();
        double[] El = new double[pm.getN()];
        double[][] yr = new double[pm.getPatrones()][pm.getN()];
        double[] yo = null;
        System.out.println("");
        System.out.println("");
        for (int e = 1; e < pm.getEpoch(); e++) {//ciclo de iteraciones
            System.out.println("INTERACION # " + (e + 1));
            labelIteracion.setText("Iteracion: " + (e + 1));

            double[] Ep = new double[pm.getPatrones()];
            double sumEp = 0;
            for (int p = 0; p < pm.getPatrones(); p++) {//ciclo de patrones
                System.out.println("Patron #" + (p + 1));

                double sumEl = 0;
                for (int co = 0; co < pm.getNumeroCapasOcultas().length + 1; co++) {
                    if (co == 0) {
                        yo = new double[pm.getNumeroCapasOcultas()[co]];
                        System.out.println("Capa Entradas Vs oculta 1 ");
                        double somao = 0;
                        for (int i = 0; i < pm.getNumeroCapasOcultas()[co]; i++) {
                            for (int j = 0; j < pm.getM(); j++) {
                                somao = somao + pm.getPesos().get(co)[j][i] * pm.getX()[p][j];
                            }
                            somao = somao - pm.getUmbrales().get(co)[i];

                            yo[i] = pm.activacion(pm.getFuncionesActivacion()[co], somao);
                        }

                        yAux.add(yo);
                    } else if (co == pm.getNumeroCapasOcultas().length) {
                        System.out.printf("Capa Oculta %d Vs capa de salida \n", (co - 1) + 1);
                        for (int i = 0; i < pm.getN(); i++) {
                            double soma = 0;
                            for (int j = 0; j < pm.getNumeroCapasOcultas()[co - 1]; j++) {
                                soma = soma + pm.getPesos().get(co)[j][i] * yo[j];
                            }
                            soma = soma - pm.getUmbrales().get(co)[i];

                            yr[p][i] = pm.activacion(pm.getFuncionesActivacion()[co], soma);

                            //yr[i]=gausiana(soma);
                            El[i] = (pm.getYd()[p][i] - yr[p][i]);
                            //System.out.println("ERROR LINEAL "+El[i
                            System.out.println("salida deseada " + pm.getYd()[p][i] + " salida de la red " + yr[p][i]);

                            sumEl = sumEl + abs(El[i]);
                        }
                    } else {
                        System.out.printf("Capa Oculta %d Vs oculta %d \n", (co - 1) + 1, co + 1);

                        double[] y√± = new double[pm.getNumeroCapasOcultas()[co]];

                        for (int i = 0; i < pm.getNumeroCapasOcultas()[co]; i++) {
                            double soma√± = 0;
                            for (int j = 0; j < pm.getNumeroCapasOcultas()[co - 1]; j++) {
                                soma√± = soma√± + pm.getPesos().get(co)[j][i] * yo[j];
                            }
                            soma√± = soma√± - pm.getUmbrales().get(co)[i];

                            y√±[i] = pm.activacion(pm.getFuncionesActivacion()[co], soma√±);
                        }
                        yo = y√±;
                        yAux.add(yo);
                    }
                }

                Ep[p] = sumEl / pm.getN();
                System.out.println("suma de errores lineales" + sumEl);

                sumEp = sumEp + Ep[p];

                //modificamos pesos y umbrales
                if ("reglaDelta".equals(pm.getAlgoritmo())) {
                    pm.reglaDelta(Ep, p, El, yAux);
                } else if ("reglaDeltaModificada".equals(pm.getAlgoritmo())) {
                    pm.reglaDeltaModificada(e, Ep, p, El, yAux);
                }//fin regla reglaDelta modificada
            }

            erms = sumEp / pm.getPatrones();
            System.out.println("suma de errores lineales" + sumEp);

            listaErrores.add(erms);
            graficarErmsIteracion(listaErrores, pm.getGoal());
            System.out.println("ERMS :" + erms);
            labelErms.setText("Error Erms: " + erms);
            if (erms <= pm.getGoal()) {
                System.out.println("Entranamiento finalizado con exito");
                break;
            }
        }

        if (erms <= pm.getGoal()) {
            System.out.println("Entranamiento finalizado con exito");
            JOptionPane.showMessageDialog(this, "Entranamiento finalizado con exito");
        } else {
            JOptionPane.showMessageDialog(this, "Entranamiento finalizado sin exito", "Entrenamiento", JOptionPane.WARNING_MESSAGE);
        }
        graficarYrVsYd(yr);
    }

    public boolean inicializarPesosUmbrales() {
        try {
            pm.inicializacionPesosUmbrales();
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    private void graficarSimulacion(double[][] yr) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        System.out.println("yr.length: " + yr.length + " yr[0].length: " + yr[0].length);
        for (int i = 0; i < yr.length; i++) {
            for (int j = 0; j < yr[i].length; j++) {
                dataset.setValue(pm.getYd()[i][j], "Yd", "patron" + (i + 1));
                dataset.setValue(yr[i][j], "Yr", "patron" + (i + 1));
            }
        }

        JFreeChart chart = createChart(dataset, "Grafica de la simulacion");

        // Ponemos el gr√°fico en un contentPane
        ChartPanel chartPanel = new ChartPanel(chart);

        // Dejamos el tama√±o por defecto
        chartPanel.setPreferredSize(panelSimulacionGeneral.getPreferredSize());
        chartPanel.setBounds(panelSimulacionGeneral.getBounds());

        panelSimulacionGeneral.removeAll();
        panelSimulacionGeneral.setLayout(new java.awt.BorderLayout());
        panelSimulacionGeneral.add(chartPanel);
        panelSimulacionGeneral.validate();
    }

    private void graficarYrVsYd(double[][] yr) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        System.out.println("yr.length: " + yr.length + " yr[0].length: " + yr[0].length);
        for (int i = 0; i < yr.length; i++) {
            for (int j = 0; j < yr[i].length; j++) {
                dataset.setValue(pm.getYd()[i][j], "Yd", "patron" + (i + 1));
                dataset.setValue(yr[i][j], "Yr", "patron" + (i + 1));
            }
        }

        JFreeChart chart = createChart(dataset, "Grafica Yd vs Yr");

        // Ponemos el gr√°fico en un contentPane
        ChartPanel chartPanel = new ChartPanel(chart);

        // Dejamos el tama√±o por defecto
        chartPanel.setPreferredSize(panelGraficaYrVsYd.getPreferredSize());
        chartPanel.setBounds(panelGraficaYrVsYd.getBounds());

        panelGraficaYrVsYd.removeAll();
        panelGraficaYrVsYd.setLayout(new java.awt.BorderLayout());
        panelGraficaYrVsYd.add(chartPanel);
        panelGraficaYrVsYd.validate();
    }

    private JFreeChart createChart(DefaultCategoryDataset dataset, String title) {

        JFreeChart chart = ChartFactory.createBarChart3D(title, "Salidas",
                "valores", dataset, // data
                PlotOrientation.VERTICAL, true, // include legend
                true, false);
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        CategoryAxis xAxis = (CategoryAxis) plot.getDomainAxis();
        xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45); // Inclinamos 45 grados las etiquetas del eje X
        plot.setBackgroundAlpha(0.5f);

        //personalizaci√≥n del grafico color de fondo 
        plot.setBackgroundPaint(Color.white);
        //personalizaci√≥n del grafico color de los grit 
        plot.setDomainGridlinePaint(Color.BLACK);
        plot.setRangeGridlinePaint(Color.BLACK);
        // disable bar outlines...
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        // set up gradient paints for series...
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.green,
                0.0f, 0.0f, new Color(0, 0, 64)
        );
        GradientPaint gp1 = new GradientPaint(
                0.0f, 0.0f, Color.blue,
                0.0f, 0.0f, new Color(0, 64, 0)
        );
        GradientPaint gp2 = new GradientPaint(
                0.0f, 0.0f, Color.red,
                0.0f, 0.0f, new Color(64, 0, 0)
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        return chart;
    }

    private void graficarErmsIteracion(ArrayList listaErms, double errorMaximoPermitido) {
        // TODO add your handling code here:

        XYSeries sErms;//serie Erms
        XYSeries sIteraciones;//serie Iteraciones
        //titulos de las dos lineas que se graficaran
        sErms = new XYSeries("error maximo permitido");
        sIteraciones = new XYSeries("Erms vs Iteraciones");
        // ejemplo de valores que puedo cargar en la serie

        for (int i = 0; i < listaErms.size(); i++) {
            sIteraciones.add(i, (double) listaErms.get(i));
            sErms.add(i, errorMaximoPermitido);
        }

        //creo un contenedor que me almacenara el valor de las do series
        XYSeriesCollection xySeriesColletion = new XYSeriesCollection();

        //almaceno cada serie en el contendor
        xySeriesColletion.addSeries(sErms);
        xySeriesColletion.addSeries(sIteraciones);

        XYDataset contenedor = xySeriesColletion;
        //creo un marco de para que se pueda visualizar en la pantalla
        JFreeChart marco = ChartFactory.createXYLineChart("Gr√°fico de Erms vs Iteraci√≥n", "Iteraci√≥n", "Error RMS", contenedor, PlotOrientation.VERTICAL, true, true, true);

        // Mostramos la grafica dentro del jPanel1
        ChartPanel panel = new ChartPanel(marco);

        //definimos el tama√±o y la posicion
        panel.setPreferredSize(panelGraficaEntrenamiento.getPreferredSize());
        panel.setBounds(panelGraficaEntrenamiento.getBounds());

        panelGraficaEntrenamiento.removeAll();
        panelGraficaEntrenamiento.setLayout(new java.awt.BorderLayout());
        panelGraficaEntrenamiento.add(panel);
        panelGraficaEntrenamiento.validate();
    }

    private boolean validarConfiguracion() {
        if (txtNumeroIteraciones.getText().isEmpty() || "0".equals(txtNumeroIteraciones.getText())) {
            JOptionPane.showMessageDialog(null, "El campo  Numero Iteraciones no puede ser nulo o igual a cero", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            txtNumeroIteraciones.requestFocus();
        } else if (txtErrorMaximoPermitido.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo Error Maximo Permitido no puede ser nulo ", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            txtErrorMaximoPermitido.requestFocus();
        } else if (txtTasaAprendizaje.getText().isEmpty() || "0".equals(txtTasaAprendizaje.getText())) {
            JOptionPane.showMessageDialog(null, "El campo Rata Aprendizaje no puede ser nulo o igual a cero", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            txtTasaAprendizaje.requestFocus();
        } else if (pm.getFuncionesActivacion() == null || pm.getFuncionesActivacion() == null) {
            JOptionPane.showMessageDialog(null, "El campo Funcion de activacion no puede ser nulo", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            jTable1.requestFocus();
        } else if (pm.getAlgoritmo() == null || pm.getAlgoritmo().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El Algoritmo no puede ser nulo", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            jRadioButton1.requestFocus();
        } else if (pm.getNumeroCapasOcultas() == null || (int) spnNumeroCapasOcultas.getValue() == 0) {
            JOptionPane.showMessageDialog(null, "El Numero Capas Ocultas no puede ser nulo", "Campos Vacios", JOptionPane.ERROR_MESSAGE);
            spnNumeroCapasOcultas.requestFocus();
        } else {
            return true;
        }
        return false;
    }

    private double[][] simular(double[][] patrones) {
        double[][] yr = new double[patrones.length][pm.getN()];
        System.out.println("entradas length: " + patrones.length);

        pm.simular(patrones);
        return yr;
    }

    @Override
    public void run() {
        entrenar();
    }

    private void mostrarDatosParaSimular() {
        int fil = pm.getPatrones();
        int col = pm.getM();

        String cad[] = new String[col + 1];
        for (int i = 0; i < col; i++) {
            cad[i] = "x" + (i + 1);
        }

        cad[pm.getM()] = "seleccionado";

        Class[] tipo = new Class[col];
        for (int i = 0; i < col; i++) {
            tipo[i] = java.lang.Double.class;
        }

        Object ob[][] = new Object[fil][col];
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                ob[i][j] = pm.getX()[i][j];
            }
        }

        table.setModel(new javax.swing.table.DefaultTableModel(ob, cad) {
            Class[] types = tipo;

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });

//        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        table.setColumnSelectionAllowed(true);
//        table.getTableHeader().setReorderingAllowed(false);
//        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        addCheckBox(pm.getM(), table);
    }

    public void addCheckBox(int column, JTable table) {
        TableColumn tc = table.getColumnModel().getColumn(column);
        tc.setCellEditor(table.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(table.getDefaultRenderer(Boolean.class));
    }

    public boolean isSelected(int row, int column, JTable table) {
        return table.getValueAt(row, column) != null;
    }

}
